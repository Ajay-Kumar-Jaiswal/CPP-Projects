#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
using namespace std;

class Subject {
public:
    string name;
    int credits;
    string grade;
    float gradePoint;

    Subject(string n, int c, string g, float gp) 
        : name(n), credits(c), grade(g), gradePoint(gp) {}
};

class Semester {
public:
    int semNumber;
    vector<Subject> subjects;

    Semester(int num) : semNumber(num) {}

    // Convert grade â†’ grade point
    float getGradePoint(string grade) {
        if (grade == "O") return 10;
        if (grade == "A+") return 9;
        if (grade == "A") return 8;
        if (grade == "B+") return 7;
        if (grade == "B") return 6;
        if (grade == "C") return 5;
        if (grade == "F") return 0;
        return -1;
    }

    // Add subject into this semester
    void addSubject() {
        string subName, grade;
        int credits;
        cout << "\nEnter Subject Name: ";
        cin.ignore();
        getline(cin, subName);
        cout << "Enter Credits: ";
        cin >> credits;
        cout << "Enter Grade (O, A+, A, B+, B, C, F): ";
        cin >> grade;

        float gp = getGradePoint(grade);
        if (gp == -1) {
            cout << "Invalid grade entered!\n";
            return;
        }
        subjects.push_back(Subject(subName, credits, grade, gp));
        cout << "Subject Added Successfully!\n";
    }

    // Display subjects of this semester
    void displaySubjects() {
        cout << "\n==== Semester " << semNumber << " Subjects ====\n";
        cout << left << setw(20) << "Subject"
             << setw(10) << "Credits"
             << setw(10) << "Grade"
             << setw(10) << "Point" << "\n";
        cout << "----------------------------------------------------\n";
        for (auto &s : subjects) {
            cout << left << setw(20) << s.name
                 << setw(10) << s.credits
                 << setw(10) << s.grade
                 << setw(10) << s.gradePoint << "\n";
        }
        cout << "Semester " << semNumber << " CGPA: " 
             << fixed << setprecision(2) << calculateCGPA() << "\n";
    }

    // Calculate semester CGPA
    float calculateCGPA() {
        float totalPoints = 0;
        int totalCredits = 0;
        for (auto &s : subjects) {
            totalPoints += s.gradePoint * s.credits;
            totalCredits += s.credits;
        }
        return (totalCredits == 0) ? 0 : totalPoints / totalCredits;
    }
};

class StudentApp {
    vector<Semester> semesters;
public:
    void addSemester() {
        int num = semesters.size() + 1;
        semesters.push_back(Semester(num));
        cout << "Semester " << num << " created!\n";
    }

    void addSubjectToSemester() {
        if (semesters.empty()) {
            cout << "No semesters found! Please add a semester first.\n";
            return;
        }
        int sem;
        cout << "Enter semester number (1-" << semesters.size() << "): ";
        cin >> sem;
        if (sem < 1 || sem > semesters.size()) {
            cout << "Invalid semester!\n";
            return;
        }
        semesters[sem-1].addSubject();
    }

    // ðŸ”¹ Changed: Show details of ALL semesters
    void viewAllSemesters() {
        if (semesters.empty()) {
            cout << "No semesters found!\n";
            return;
        }
        cout << "\nShowing details of ALL semesters:\n";
        for (auto &sem : semesters) {
            sem.displaySubjects();
        }
        cout<<"-------------------------------------------------------------";
        overallCGPA();
    }

    void overallCGPA() {
        if (semesters.empty()) {
            cout << "No semesters found!\n";
            return;
        }
        float totalPoints = 0;
        int totalCredits = 0;
        for (auto &sem : semesters) {
            for (auto &s : sem.subjects) {
                totalPoints += s.gradePoint * s.credits;
                totalCredits += s.credits;
            }
        }
        float cgpa = (totalCredits == 0) ? 0 : totalPoints / totalCredits;
        cout << "\nOverall CGPA (all semesters): " 
             << fixed << setprecision(2) << cgpa << "\n";
    }
};

int main() {
    StudentApp app;
    int choice;

    do {
        cout << "\n=========== CGPA CALCULATOR APP ===========\n";
        cout << "1 Add Semester\n";
        cout << "2 Add Subject to Semester\n";
        cout << "3 View All Semesters Details\n";  // ðŸ”¹ Updated text
        cout << "4 Calculate Overall CGPA\n";
        cout << "5 Exit\n";
        cout << "Enter choice: ";
        cin >> choice;

        switch (choice) {
            case 1: app.addSemester(); break;
            case 2: app.addSubjectToSemester(); break;
            case 3: app.viewAllSemesters(); break;  // ðŸ”¹ updated
            case 4: app.overallCGPA(); break;
            case 5: cout << "Exiting App...\n"; break;
            default: cout << "Invalid choice, try again!\n";
        }
    } while (choice != 5);

    return 0;
}
